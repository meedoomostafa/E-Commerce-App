@model Product

@{
    ViewBag.Title = "Product Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h2 class="text-center mb-5">Product Details</h2>

    @if (Model == null)
    {
        <div class="alert alert-danger text-center">
            Product not found!
        </div>
    }
    else
    {
        @if (TempData["SuccessFavorite"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessFavorite"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Product Card with Top-Right Icon -->
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow-sm rounded-4 mb-4 position-relative">
                    <!-- Favorite Button - Top Right -->
                    <div class="position-absolute" style="top: 15px; right: 15px; z-index: 10;">
                        <form id="favoriteForm" asp-area="Customer" asp-controller="Favorites" asp-action="ToggleFavorite" method="post">
                            <input type="hidden" name="productId" value="@Model.Id" />
                            <input type="hidden" name="returnUrl" value="@Context.Request.Path" />
                            <button id="favoriteButton" type="submit" class="btn btn-link text-decoration-none p-0">
                                <i id="heartIcon" class="fas fa-heart fs-2"></i>
                            </button>
                        </form>
                    </div>

                    <!-- Product Image -->
                    <div class="text-center mb-3 p-3">
                        <img src="@(!string.IsNullOrEmpty(Model.ImageUrl) ? Model.ImageUrl : "/images/placeholder.jpg")"
                             alt="@Model.Name"
                             class="img-fluid rounded-4 shadow-sm"
                             style="max-height: 400px; object-fit: cover;" />
                    </div>

                    <div class="card-body">
                        <h3 class="card-title mb-4">@Model.Name</h3>
                        <p><strong>Description:</strong> @Model.Description</p>
                        <p><strong>Price:</strong> @Model.Price.ToString("C")</p>
                        <p><strong>Stock:</strong> @Model.Stock</p>
                        <p><strong>Category:</strong> @(Model.Category?.Name ?? "No Category")</p>

                        <!-- Add to Cart Button -->
                        <div class="d-flex justify-content-center mt-4">
                            @if (Model.Stock > 0)
                            {
                                <form asp-action="AddToCart" method="post" class="w-100 text-center">
                                    <input type="hidden" name="productId" value="@Model.Id" />
                                    <input type="hidden" name="returnUrl" value="@Url.Action("Details", "Home", new { id = Model.Id })" />
                                    <button type="submit" class="btn btn-primary px-4">
                                        <i class="fas fa-cart-plus me-2"></i> Add to Cart
                                    </button>
                                </form>
                            }
                            else
                            {
                                <div class="alert alert-warning text-center w-100">
                                    Out of Stock
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- User Reviews Section -->
                <div class="card shadow-sm rounded-4 mb-4">
                    <div class="card-body">
                        <h5 class="fw-bold mb-3">User Reviews</h5>

                        @if (Model.Reviews == null || !Model.Reviews.Any())
                        {
                            <div class="alert alert-info mb-0">
                                No reviews yet. Be the first to review this product!
                            </div>
                        }
                        else
                        {
                            <div class="list-group">
                                @foreach (var review in Model.Reviews)
                                {
                                    <div class="list-group-item p-3 mb-2 border rounded">
                                        <!-- Reviewer's Profile with Stars to Right -->
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <div class="d-flex align-items-center">
                                                <i class="fas fa-user-circle fs-4 me-2 text-secondary"></i>
                                                <span class="fw-bold">@(review.User?.FirstName ?? "Anonymous")</span>
                                            </div>
                                            <!-- Rating Stars -->
                                            <div class="text-warning">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="fas fa-star @(i <= review.Rating ? "text-warning" : "text-muted")"></i>
                                                }
                                            </div>
                                        </div>
                                        
                                        <!-- Review Comment Below User Info -->
                                        <p class="mb-1 ms-4 ps-2">@review.Comment</p>
                                        <small class="text-muted ms-4 ps-2">Reviewed on @review.CreatedAt.ToShortDateString()</small>
                                    </div>
                                }
                            </div>
                        }

                        <!-- Add Review Form -->
                        <hr />
                        <h6 class="fw-bold mb-3">Leave a Review</h6>
                        <form asp-area="Customer" asp-controller="Reviews" asp-action="AddReview" method="post">
                            <input type="hidden" name="productId" value="@Model.Id" />

                            <div class="mb-3">
                                <label class="form-label">Rating</label>
                                <div id="rating-stars" class="d-flex gap-2">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="fas fa-star rating-star text-muted" data-rating="@i"></i>
                                    }
                                </div>
                                <input type="hidden" id="rating" name="rating" value="0" required />
                            </div>

                            <div class="mb-3">
                                <label for="comment" class="form-label">Comment (Optional)</label>
                                <textarea id="comment" name="comment" class="form-control" rows="3"></textarea>
                            </div>

                            <button type="submit" class="btn btn-primary">Submit Review</button>
                        </form>
                    </div>
                </div>

                <!-- Back Button -->
                <div class="text-center mt-3 mb-5">
                    <a asp-action="Index" class="btn btn-secondary px-5 py-2 rounded-3">Back to Products</a>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <!-- Star Rating Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const stars = document.querySelectorAll('.rating-star');
            const ratingValue = document.getElementById('rating');
            
            stars.forEach(star => {
                star.addEventListener('click', function () {
                    const selectedRating = this.getAttribute('data-rating');
                    ratingValue.value = selectedRating;
                    
                    // Update star colors
                    stars.forEach((s, index) => {
                        s.classList.toggle('text-warning', index < selectedRating);
                        s.classList.toggle('text-muted', index >= selectedRating);
                    });
                });
                
                star.addEventListener('mouseover', function () {
                    const hoveredRating = this.getAttribute('data-rating');
                    stars.forEach((s, index) => {
                        s.classList.toggle('text-warning', index < hoveredRating);
                        s.classList.toggle('text-muted', index >= hoveredRating);
                    });
                });
                
                star.addEventListener('mouseout', function () {
                    const currentRating = ratingValue.value;
                    stars.forEach((s, index) => {
                        s.classList.toggle('text-warning', index < currentRating);
                        s.classList.toggle('text-muted', index >= currentRating);
                    });
                });
            });
        });
        
        // Toggle Favorite AJAX
        $(document).ready(function () {
            var productId = $('input[name="productId"]').val();
            
            // Check favorite state in localStorage
            if (localStorage.getItem('favorite_' + productId) === 'true') {
                $('#heartIcon').removeClass('text-muted').addClass('text-danger');
            } else {
                $('#heartIcon').removeClass('text-danger').addClass('text-muted');
            }
            
            $('#favoriteForm').on('submit', function (e) {
                e.preventDefault();
                var form = $(this);
                var formData = form.serialize();
                var heartIcon = $('#heartIcon');
                
                // Toggle favorite state in localStorage
                var isFavorited = localStorage.getItem('favorite_' + productId) === 'true' ? 'false' : 'true';
                localStorage.setItem('favorite_' + productId, isFavorited);
                
                // Toggle heart icon appearance
                heartIcon.toggleClass('text-muted text-danger');
                
                // Submit the form via AJAX
                $.ajax({
                    url: '/Customer/Favorites/ToggleFavorite',
                    method: 'POST',
                    data: formData,
                    success: function (response) {
                        console.log('Response:', response);
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                        alert('An error occurred while updating your favorites.');
                    }
                });
                
                // Add animation effect
                heartIcon.addClass('animate__animated animate__heartBeat');
                setTimeout(function () {
                    heartIcon.removeClass('animate__animated animate__heartBeat');
                }, 1000);
            });
        });
    </script>
}